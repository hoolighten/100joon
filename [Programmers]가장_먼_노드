#include <string>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;



int solution(int n, vector<vector<int>> edge) {
    vector<vector<int>> route(n+1);
    vector<int> visited(n+1, 0);
    vector<int> distance(n+1, 0);
    queue<int> q;
    int max_val = -1;
    int answer = 0;
    for(int i = 0; i < edge.size(); i++)
    {
        route[edge[i][0]].push_back(edge[i][1]);
        route[edge[i][1]].push_back(edge[i][0]);
    }
    visited[1] = 1;
    q.push(1);
    while(!q.empty())
    {
        int num;
        num = q.front();
        q.pop();
        for(auto next_num : route[num])
        {
            if(visited[next_num] == 0)
            {
                visited[next_num] = 1;
                distance[next_num] = distance[num]+1;
                max_val = max(max_val, distance[next_num]);
                q.push(next_num);
            }   
        }
    }
    for(int i = 1; i < n+1; i++)
    {
        if(max_val == distance[i])
        {
            answer++;
        }
    }
    return answer;
}
